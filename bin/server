#!/usr/bin/env bash

# Activate python env
source "bin/activate-env" >/dev/null 2>&1

# Function to download GraphQL schema using curl and introspection
download_graphql_schema() {
    local endpoint="$1"
    local output_file="$2"

    echo "Downloading GraphQL schema from $endpoint..."

    curl -s -X POST "$endpoint" \
        -H "Content-Type: application/json" \
        -d '{
            "query": "query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } } }"
        }' \
        -o "$output_file" && echo "✓ Schema saved to $output_file" || { echo "✗ Failed to download schema"; exit 1; }
}

# Run server commands
if [[ "$*" == *gen:ee* ]]; then
    cd "${ROOT:?}"
    download_graphql_schema "http://localhost:5002/graphql/" "${ROOT:?}/schemas/graphql-ee.json"
    cd -
elif [[ "$*" == *gen:graph* ]]; then
    cd "${ROOT:?}"
    download_graphql_schema "http://localhost:5002/graphql/" "${ROOT:?}/schemas/graphql.json"
    cd -
elif [[ "$*" == *gen:admin* ]]; then
    cd "${ROOT:?}"
    download_graphql_schema "http://localhost:5002/admin/graphql/" "${ROOT:?}/schemas/graphql-admin.json"
    cd -
elif [[ "$*" == *gen:platform* ]]; then
    cd "${ROOT:?}"
    download_graphql_schema "http://localhost:5002/admin/graphql/" "${ROOT:?}/ee/platform/schemas/graphql-platform.json"
    cd -
elif [[ "$*" == *gen:openapi* ]]; then
    cd "${ROOT:?}"
    curl http://localhost:5002/shipping-openapi -o "${ROOT:?}/schemas/openapi.yml"
    cd -
elif [[ "$*" == *gen:ref* ]]; then
    cd "${ROOT:?}"
    curl http://localhost:5002/v1/carriers >"${ROOT:?}/apps/web/public/carrier-integrations.json"
    cd -
elif [[ "$*" == *gen:ts:cli* ]]; then
    cd "${ROOT:?}"
    docker run --rm -v ${PWD}:/local openapitools/openapi-generator-cli generate \
        -i /local/schemas/openapi.yml \
        -g typescript-fetch \
        -o /local/packages/karriojs/api/generated \
        --additional-properties=typescriptThreePlus=true \
        --additional-properties=modelPropertyNaming=snake_case \
        --additional-properties=useSingleRequestParameter=true
    cd -
elif [[ "$*" == *build:js* ]]; then
    cd "${ROOT:?}/packages/karriojs"

    # Generate ts client
    . ${ROOT}/bin/server gen:ts:cli || exit 1

    # Build js client
    rm -rf node_modules
    npm install
    npx gulp build --output "${ROOT:?}/apps/api/karrio/server/static/karrio/js/karrio.js" || exit 1
    cd -
    karrio collectstatic --noinput >/dev/null 2>&1
else
    echo "Help: You can pass any of the following commands to the server"
    echo "-----"
    echo "gen:ee        - Generate GraphQL enterprise edition schema from localhost:5004/graphql/"
    echo "gen:graph     - Generate standard GraphQL schema from localhost:5004/graphql/"
    echo "gen:admin     - Generate Admin GraphQL schema from localhost:5004/admin/graphql/"
    echo "gen:platform  - Generate Platform GraphQL schema from localhost:5004/admin/graphql/"
    echo "gen:openapi   - Generate OpenAPI schema from localhost:5004/shipping-openapi"
    echo "gen:ref       - Generate carrier integrations reference file from localhost:5004/v1/carriers"
    echo "gen:ts:cli    - Generate TypeScript fetch client from OpenAPI schema using docker"
    echo "build:js      - Build Browser JavaScript client (runs gen:ts:cli, installs dependencies, builds with gulp)"
fi
