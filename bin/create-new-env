#!/usr/bin/env bash

# Source environment variables
source "bin/_env" "$@"

# Only show detailed env preparation steps in verbose mode
if [[ "$VERBOSE" == "true" ]]; then
    echo 'prepare env directory ...'
fi

# prepare virtual environment directory
deactivate >/dev/null 2>&1
mkdir -p "${ROOT:?}/$ENV_DIR"

[[ -d "${ROOT:?}/$ENV_DIR/$BASE_DIR" ]] && rm -rf "${ROOT:?}/$ENV_DIR/$BASE_DIR"

# create virtual environment
minimal_log "Creating Python environment"
python3 -m venv "${ROOT:?}/$ENV_DIR/$BASE_DIR"

if [[ "$VERBOSE" == "true" ]]; then
    echo "activating $BASE_DIR env ..."
fi

# Handle both Unix (bin) and Windows (Scripts) paths
if [[ -f "${ROOT:?}/$ENV_DIR/$BASE_DIR/Scripts/activate" ]]; then
    source "${ROOT:?}/$ENV_DIR/$BASE_DIR/Scripts/activate"
else
    source "${ROOT:?}/$ENV_DIR/$BASE_DIR/bin/activate"
fi

# install requirements
if [[ "$VERBOSE" == "true" ]]; then
    echo "installing base requirements ..."
fi

run_command "python -m pip install pip --upgrade" "Failed to upgrade pip" "Upgrading pip..." || exit $?

if [[ "$*" != *--empty* ]]; then
    run_pip_install "${ROOT}/requirements.dev.txt" "Failed to install development requirements" || exit $?
fi
